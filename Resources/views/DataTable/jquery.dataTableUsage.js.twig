!function ($) {

$(document).ready(function(){
    
    
   var $buttonDeleteTable;
    
    /**
     * Gera o modal de confirmação da exclusão
     */
    $('.btn-delete-action').live('click', function(){

        $buttonDeleteTable = $(this);

        $('<div id="modalStatic" class="modal hide fade" tabindex="-1" data-backdrop="static" data-keyboard="false"><div class="modal-header"><h3 id="myModalLabel">Confirmação</h3></div><div class="modal-body"><p>Você tem certeza que deseja deletar esse registro?</p></div><div class="modal-footer"><button type="button" data-dismiss="modal" class="btn">Cancelar</button><button type="button" id="confirm-modal-button" class="btn red">Deletar!</button></div></div>').modal();
        $('#modalStatic').on('shown', function(){
            $('#confirm-modal-button').focus();
        });

        return false;
    });

    /**
     * Envia uma requisição para remover a entidade 
     * e fecha o modal de confirmação 
     */
    $('#confirm-modal-button').live('click', function(){
        App.blockUI('#modalStatic');
        $.get($buttonDeleteTable.attr('href'), function(notice){
            var table = $buttonDeleteTable.closest('table').dataTable();
            if(notice.type !== 'error'){
                table.fnDraw();
            }
            $('#modalStatic').modal('hide');
            App.unblockUI('#modalStatic');
            $.msgGrowl({               
                type: notice.type,
                title: notice.title,
                text: notice.message,
                position: 'top-right'            
            });
        });
    });
        
        
    /**
    * revolve os paramentros da grid
    * 
    * @param {jQuery} jTable table jquery
    * @returns {json}
    */
   $.fn.extractPrametersFromGrid = function(jTable)
   {

       var parameters = {
           
            /**
             * Entity base da grid
             */
            "entity" : jTable.data("table-entity"),
            /**
             * número de colunas que tem na grid
             */
            "numberOfColumns" : 0,
            /**
             * Métodos de acesso para pagar o valor 
             */
            "gets" : [],
            /**
             * tipo de coluna, pode ser de acesso ou de ação 
             */
            "typeParamenter" : [],
            /**
             * parametros da coluna, como largura classe e etc.
             */
            "columns" : [],
            /**
             * Nome do método da entity que tem um prefixo DQL para trazer
             * todas as entidades, ( ativo = 1) por ex
             */
            "methodDqlPart" : jTable.data("method-dqlpart") ? jTable.data("method-dqlpart") : "",
            /**
             * Rota que responde o json de entidades
             */
            "route" : jTable.data("route") ? jTable.data("route") : null,
            /**
             * parametros que são passador para a rota, poderão ser usados 
             * de quaisquer forma
             * OBS : deverá ser passado no formato json, trocando ','(virgula) por '|'(pipe)
             */
            "parameters" : jTable.data("route") ? jTable.data("route") : null
       };

       /**
        * Varre o cabeçalho da grid para extrair parametros
        */
       jTable.find("th").each(function(index, element){

            if($(element).data("table-get")){
                parameters.gets.push($(element).data("table-get"));     
                parameters.typeParamenter.push($(element).data("table-column-type") ? $(element).data("table-column-type") : "access");
            }
            var sort = null;
            $(element).data("table-column-type")? sort = false : sort = true;
            var sWidth = $(element).data("table-width") ? $(element).data("table-width") : null;
            parameters.columns.push({ "bSortable": sort, "sClass": $(element).attr('class'), "sWidth": sWidth});

            //incrementa mais uma coluna
            parameters.numberOfColumns++;

        });

        return parameters;

    };
    
    /**
     * Remove o loader e mostra a table 
     * @param {jQuery} jTable
     */
    $.fn.unlockedPortlet = function(jTable){
        var portlet = jTable.closest(".portlet-body");
        portlet.removeClass("locked");
        portlet.find(".portlet-loader").hide();
        portlet.find(".portlet-grid").fadeIn();
        return false ;
    };

   /**
    * 
    * Monta a grid server side, indicado 
    * 
    * @param {jQuery} jTable
    */
   $.fn.createDataTableServerSide = function(jTable)
   {
       jTable.addClass("data-table-server-side table table-striped table-bordered table-hover") ;

       var paramenters = $.fn.extractPrametersFromGrid(jTable);
       
       jTable.dataTable
       (
           {
               "aoColumns" : paramenters.columns ,
               "bProcessing": true,
               "bServerSide": true,
               "sAjaxSource": paramenters.route ? paramenters.route : "{{path("zuni_datatable_datatable_grid")}}",
               "sServerMethod": "POST",
               "fnRowCallback": function( nRow, aData, iDisplayIndex ) {
                   $(nRow).find(".datatable-btn").tooltip();
               },
               "fnServerParams": function(aoData) 
               {
                   aoData.push({"name": "typeParamenter", "value": paramenters.typeParamenter});
                   aoData.push({"name": "gets", "value": paramenters.gets});
                   aoData.push({"name": "numberOfColumns", "value": paramenters.numberOfColumns});
                   aoData.push({"name": "entity", "value": paramenters.entity});
                   aoData.push({"name": "methodDqlPart", "value": paramenters.methodDqlPart});
                   aoData.push({"name": "parameters", "value": paramenters.parameters});

               },
               "fnPreDrawCallback": function( oSettings ) {
                    if(!$(this).hasClass('blocked')){
                         App.blockUI(this);
                    }
                },   
               "fnDrawCallback": function( oSettings ) {
                    App.unblockUI(this);
                },       
               "sDom": "<'row-fluid'<'span6'l><'span6'f>r>t<'row-fluid'<'span6'i><'span6'p>>",
               "sPaginationType": "bootstrap",
               "oLanguage":{
                   "sLengthMenu": "{{"grid.length_menu" | trans}}",
                   "sZeroRecords": "{{"grid.no_record_found" | trans}}",
                   "sInfo": "{{"grid.info" | trans}}",
                   "sInfoEmpty": "{{"grid.info_empty" | trans}}",
                   "sInfoFiltered": "{{"grid.info_filtered" | trans}}",
                   "sSearch": "{{"grid.search" | trans}}",
                   "sProcessing": "{{"grid.processing" | trans}}",
                   "oPaginate": {
                       "sNext": "{{"grid.next" | trans}}",
                       "sPrevious": "{{"grid.previous" | trans}}",
                       "sFirst": "{{"grid.first" | trans}}",
                       "sLast": "{{"grid.last" | trans}}"
                   }
               }
           }
       );
       
       jTable.find("tbody").html('<tr><td colspan="'+paramenters.numberOfColumns+'" style="text-align: center ;">{{"grid.carregando"|trans}}</td></tr>');
       
       $.fn.unlockedPortlet(jTable);
       
   };

   /**
    * Monta a grid client side, com paginação montada toda em 
    * javascript 
    * 
    * @deprecated replace to $.fn.montaDataTableServerSide
    * @param {jQuery} jTable com o elemento table 
    */
   $.fn.createDataTable = function(jTable)
   {

       jTable.addClass("data-table-server-side table table-striped table-bordered table-hover") ;

       var paramenters = $.fn.extractPrametersFromGrid(jTable);

       jTable.dataTable({
           "aoColumns" : paramenters.columns ,
           "sDom": "<'row-fluid'<'span6'l><'span6'f>r>t<'row-fluid'<'span6'i><'span6'p>>",
           "sPaginationType": "bootstrap",
           "oLanguage":{
               "sLengthMenu": "{{"grid.length_menu" | trans}}",
               "sZeroRecords": "{{"grid.no_record_found" | trans}}",
               "sInfo": "{{"grid.info" | trans}}",
               "sInfoEmpty": "{{"grid.info_empty" | trans}}",
               "sInfoFiltered": "{{"grid.info_filtered" | trans}}",
               "sSearch": "{{"grid.search" | trans}}",
               "oPaginate": {
                   "sNext": "{{"grid.next" | trans}}",
                   "sPrevious": "{{"grid.previous" | trans}}",
                   "sFirst": "{{"grid.first" | trans}}",
                   "sLast": "{{"grid.last" | trans}}"
               }
           }
       });

       $.fn.unlockedPortlet(jTable);

   };

   //Busca por todoas as tabelas que s�o do tipo datatable
   $("table").each(
       function()
       {
           if($(this).data("table-type"))
           {
               switch($(this).data("table-type"))
               {
                   case "datatable":
                     $.fn.createDataTable($(this));
                     break;
                   case "datatable-server-side":
                     $.fn.createDataTableServerSide($(this));
                     break;
                   default:
                     alert("Você tem certeza que digitou corretamente? "+ $(this).data("data-type"));
               }
           }    
       }
   );

   $(".datatable-btn").tooltip();
});

}(window.jQuery);